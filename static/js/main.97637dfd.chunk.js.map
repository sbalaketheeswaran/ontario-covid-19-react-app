{"version":3,"sources":["App.module.css","components/Cards.js","components/Table.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","margin","alignItems","alignText","bullet","display","transform","title","fontSize","pos","marginBottom","Cards","data","classes","console","log","Grid","container","spacing","item","xs","md","Card","className","CardContent","Typography","variant","component","Total","color","Recovered","NotResolved","Fatal","rowHeaderCells","id","numeric","label","SimpleTable","props","justify","style","padding","Paper","overflowX","Table","aria-label","TableHead","TableRow","map","rowHeadCell","TableCell","key","align","TableSortLabel","active","columnToSort","direction","sortDirection","onClick","handleSort","TableBody","row","PublicHealthUnit","scope","url","fetchAllPublicHealthUnitData","a","axios","get","fetchOntarioMetaCovidCases","invertDirection","asc","desc","App","state","ontario_meta","last_synced","bind","columnName","this","setState","phu_result","result","phuList","Outcome","push","ontario_meta_result","last_synced_UTC_date","lastSynced","Date","toDateString","styles","orderBy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97637dfd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2yIrt\"};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    margin: '5% 2%',\r\n    alignItems: 'center',\r\n    alignText : 'center'\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function Cards({data}) {\r\n  const classes = useStyles();\r\n  console.log(data[0])\r\n  if(data[0]){\r\n    return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={3}>\r\n                <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    {data[0].Total}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Total\r\n                    </Typography>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    {data[0].Recovered}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Recovered\r\n                    </Typography>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    {data[0].NotResolved}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Not Resolved\r\n                    </Typography>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    {data[0].Fatal}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Fatal\r\n                    </Typography>\r\n                </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n  }\r\n  return \"Currently Loading...\"\r\n}","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\n\r\n\r\nconst rowHeaderCells = [\r\n  { id: 'PublicHealthUnit', numeric: false, label: 'Public Health ID' },\r\n  { id: 'Total', numeric: true, label: 'Total' },\r\n  { id: 'Recovered', numeric: true, label: 'Recovered' },\r\n  { id: 'NotResolved', numeric: true, label: 'Not Resolved' },\r\n  { id: 'Fatal', numeric: true, label: 'Fatal' },\r\n];\r\n\r\nexport default function SimpleTable(props) {\r\n  console.log(props.data)\r\n  if(props.data){\r\n    return (\r\n      <Grid container justify={\"center\"}>\r\n        <Grid item xs={12} md={10} style={{ padding: \"8px\" }}>\r\n          <Paper style={{ overflowX: \"auto\" }}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                {rowHeaderCells.map((rowHeadCell) => ( \r\n                <TableCell\r\n                key={rowHeadCell.id}\r\n                align={rowHeadCell.numeric ? 'right' : 'left'}>\r\n                  <TableSortLabel\r\n                  active={props.columnToSort  === rowHeadCell.id}\r\n                  direction={props.columnToSort  === rowHeadCell.id ? props.sortDirection : 'asc'}\r\n                  onClick={() => props.handleSort(rowHeadCell.id)}>\r\n                  {rowHeadCell.label}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.data.map((row) => ( \r\n                  <TableRow key={row.PublicHealthUnit}>\r\n                    <TableCell align=\"left\" component=\"th\" scope=\"row\">\r\n                    {row.PublicHealthUnit}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.Total}</TableCell>\r\n                    <TableCell align=\"right\">{row.Recovered}</TableCell>\r\n                    <TableCell align=\"right\">{row.NotResolved}</TableCell>\r\n                    <TableCell align=\"right\">{row.Fatal}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return \"Currently Loading...\"\r\n}\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid-19-in-ontario-rest-api.herokuapp.com';\r\n\r\nexport const fetchAllPublicHealthUnitData = async () => {\r\n    try {\r\n        console.log(url + '/PublicHealthUnit')\r\n        const {\r\n            data\r\n        } = await axios.get(url + '/PublicHealthUnit');\r\n        return data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchOntarioMetaCovidCases = async () => {\r\n    try {\r\n        console.log(url + '/OntarioMetaCovidCase')\r\n        const {\r\n            data\r\n        } = await axios.get(url + '/OntarioMetaCovidCase');\r\n        return data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchByPublicHealthUnitID = async (id) => {\r\n    try {\r\n        const {\r\n            data\r\n        } = await axios.get(url + '/PublicHealthUnit/' + id);\r\n        return data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};","import React from 'react';\r\nimport Cards from \"./components/Cards\"\r\nimport SimpleTable from \"./components/Table\"\r\nimport { fetchAllPublicHealthUnitData, fetchOntarioMetaCovidCases } from './api/index';\r\nimport styles from './App.module.css'\r\nimport orderBy from \"lodash/orderBy\";\r\n\r\nconst invertDirection = {\r\n  asc: \"desc\",\r\n  desc: \"asc\"\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      ontario_meta : {},\r\n      last_synced : \"\",\r\n      columnToSort: \"Total\",\r\n      sortDirection: \"desc\",\r\n    }\r\n    this.handleSort = this.handleSort.bind(this)\r\n  }\r\n\r\n  handleSort(columnName){\r\n    this.setState(state => ({\r\n      columnToSort: columnName,\r\n      sortDirection:\r\n        state.columnToSort === columnName\r\n          ? invertDirection[state.sortDirection]\r\n          : \"asc\"\r\n    }));\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { result : phu_result } = await fetchAllPublicHealthUnitData();\r\n    let phuList = [];\r\n    if(phu_result)\r\n    {\r\n      for (const {Outcome, PublicHealthUnit} of phu_result) {\r\n        phuList.push({...Outcome, PublicHealthUnit})\r\n      }\r\n    }\r\n\r\n    const { result : ontario_meta_result, lastSynced : last_synced_UTC_date} = await fetchOntarioMetaCovidCases();\r\n\r\n    this.setState( {data: phuList, ontario_meta: ontario_meta_result, last_synced: new Date(last_synced_UTC_date).toDateString(`YYYY-MM-DD`)});\r\n  }\r\n\r\n  render() {\r\n    const { data, ontario_meta, last_synced, columnToSort, sortDirection} = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n      <h1>Ontario Public Health Unit City Data</h1>\r\n      <p>Last synched at : {last_synced}</p>\r\n      <Cards data={ontario_meta}/>\r\n      <SimpleTable handleSort = {this.handleSort} columnToSort = {columnToSort} sortDirection = {sortDirection} data={orderBy(\r\n              data,\r\n              columnToSort,\r\n              sortDirection\r\n            )}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}